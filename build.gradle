// we're using this plugin to combine and minify the JavaScript in this project
plugins {
    id "com.eriwen.gradle.js" version "2.14.1"
    id "com.eriwen.gradle.css" version "2.14.0"
}

// apply the JavaScript plugin
apply plugin: 'js'
// apply the css plugin
apply plugin: 'css'


def subProjects = ['toolbar', 'toolbarPhoneview', 'thumbnails', 'loading', 'drawingToolbars']
def minificationTasks = []
def compilationTasks = []
def cleaningTasks = []

subProjects.each { name ->
    // create JavaScript minification tasks for each of the customisable parts of this branding pack
    task "minify${name.capitalize()}Js"(type: com.eriwen.gradle.js.tasks.MinifyJsTask) {
        group = 'JavaScript Minification'
        description "Minifies the JavaScript file for the ${name} and changes the config to use the minified file"
        source = file("${name}/${name}.js")
        dest = file("${name}/${name}.min.js")
        sourceMap = file("${name}/${name}.min.sourcemap.json")
        closure {
            // set the log level
            warningLevel = 'QUIET'
        }
        doLast {
            // after minifying the JavaScript update the reference in the config file to the minified file rather than
            // the original source file
            ant.replace(file: "${name}/${name}Config.json", token: "${name}/${name}.js", value: "${name}/${name}.min.js")
        }
    }
    minificationTasks.add(tasks["minify${name.capitalize()}Js"])

    // create LESS compilation tasks for each of the customisable parts of this branding pack
    task "compile${name.capitalize()}Css"(type: com.eriwen.gradle.css.tasks.LessTask) {
        group = 'LESS Compilation'
        description "Compiles the LESS file for ${name}"
        source = file("${name}/style.less")
        dest = file("${name}/")
    }
    compilationTasks.add(tasks["compile${name.capitalize()}Css"])

    // create cleaning tasks to undo any in-place changes
    task "clean${name.capitalize()}"(type: Delete) {
        group = 'Branding Pack Cleaning'
        description "Cleans up modified and transitional files for ${name}"
        delete "${name}/${name}.min.js"
        delete "${name}/style.css"
        delete "${name}/${name}.min.sourcemap.json"
        doLast {
            // reverse the config changes: they should reference the non-minified JavaScript source, not the minified
            ant.replace(file: "${name}/${name}Config.json", token: "${name}/${name}.min.js", value: "${name}/${name}.js")
        }
    }
    cleaningTasks.add(tasks["clean${name.capitalize()}"])
}

// minifies all the JavaScript in this project by depending on the dynamic minification tasks created above
task minifyAllJs {
    group = 'Branding Pack Build'
    description = 'Minifies all the JavaScript files in this project and updates all the config files to use the minified versions'
    // depend on all the minification tasks
    dependsOn = minificationTasks
}

// compiles all the LESS in this project by depending on the dynamic LESS tasks created above
task compileAllCss {
    group = 'Branding Pack Build'
    description = 'Compiles all the LESS files in this project'
    // depend on all the LESS compilation tasks
    dependsOn = compilationTasks
}

task build(dependsOn: [minifyAllJs, compileAllCss]) {
    group = 'Branding Pack Build'
    description = 'Minifies the JavaScript files and compiles the LESS files for all parts of the branding pack'
}

task cleanSubmodules {
    group = 'Branding Pack Build'
    description = 'Cleans up all modified and transitional files from the build scripts'
    // depend on all the cleaning tasks
    dependsOn = cleaningTasks
}

task cleanBuild(type: Delete) {
    group = 'Branding Pack Build'
    description = 'Cleans up the output build folder'
    delete 'build'
}

// builds the pack then copies the assets into a `build` folder
task copyBrandingPack(type: Copy, dependsOn: [cleanBuild, build]) {
    group = 'Branding Pack Build'
    description = "Copy the built branding pack files into a separate build folder"
    build.mustRunAfter cleanBuild
    from "./"
    include 'loading/'
    exclude 'loading/loading.js'
    include 'thumbnails/'
    exclude 'thumbnails/thumbnails.js'
    include 'toolbar/'
    exclude 'toolbar/toolbar.js'
    include 'toolbarPhoneview/'
    exclude 'toolbarPhoneview/toolbarPhoneview.js'
    include 'drawingToolbars/'
    exclude 'drawingToolbars/drawingToolbars.js'
    include 'artwork/'
    include 'info/'
    include 'rollovers/'
    include 'phoneview/'
    include 'customStringsPack.json/'
    include 'logo.png'
    include 'placeholder.png'
    // exclude all sourcemap files
    exclude '**/*.min.sourcemap.json'
    // exclude all less files
    exclude '**/*.less'
    into 'build/'
}

task prepareBrandingPack(type: Copy, dependsOn: [copyBrandingPack, cleanSubmodules]) {
    group = 'Branding Pack Build'
    description = "Coordinate copying the built pack and cleaning modified files"
    cleanSubmodules.mustRunAfter copyBrandingPack
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14'
}
